<?php
/**
 * Copyright 2013 hbz NRW (http://www.hbz-nrw.de/)
 *
 * This file is part of regal-drupal.
 *
 * regal-drupal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * regal-drupal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with regal-drupal.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_field_info().
 */
function edoweb_field_field_info() {
  return array(
    'edoweb_ld_reference' => array(
      'label' => t('A linked data field'),
      'description' => t('This field holds the URI of a linked data resource'),
      'default_widget' => 'edoweb_autocomplete_widget',
      'default_formatter' => 'edoweb_ld_format',
      'property_type' => 'text',
    ),
    'edoweb_date' => array(
      'label' => t('A field for dates'),
      'description' => t('This field holds dates of the format DD.MM.YYYY, MM/YYYY or YYYY'),
      'settings' => array('max_length' => 10),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'text_textfield',
      'default_formatter' => 'text_default',
      'property_type' => 'text',
    ),
    'edoweb_datastream' => array(
      'label' => t('A field for datastreams'),
      'description' => t('This field holds datastream URIs'),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'edoweb_upload_widget',
      'default_formatter' => 'edoweb_datastream_format',
      'property_type' => 'uri',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function edoweb_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Overwrite default autocomplete behaviour
  drupal_add_js(
    drupal_get_path('module', 'edoweb_field') . '/edoweb_field_autocomplete.js',
    array('weight' => '100')
  );

  switch ($field['type']) {
    case 'edoweb_date':
      foreach ($items as $delta => $item) {
        if (!edoweb_field_field_is_empty($item, $field) &&
            !_edoweb_value_is_valid_date($item['value'])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'edoweb_field_date_invalid',
            'message' => t('Dates must be of the form DD.MM.YYY, MM/YYYY or YYYY.'),
          );
        }
      }
      break;
    case 'edoweb_ld_reference':
      foreach ($items as $delta => $item) {
        if (!edoweb_field_field_is_empty($item, $field) &&
            !_edoweb_value_is_valid_uri($item['value'])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'edoweb_field_uri_invalid',
            'message' => t('Value must be a valid, absolute URI.'),
          );
        }
      }
      break;
  }
}

function _edoweb_value_is_valid_date($value) {
  $pattern = '/^(\d\d\.\d\d\.\d\d\d\d|\d\d\/\d\d\d\d|\d\d\d\d)$/';
  return preg_match($pattern, $value) === 1;
}

function _edoweb_value_is_valid_uri($value) {
  /*
   * URI validation regular expression from
   * http://jmrware.com/articles/2009/uri_regexp/URI_regex.html#uri-38
   */
  $pattern = "`
    [A-Za-z][A-Za-z0-9+\-.]* :
    (?: //
      (?: (?:[A-Za-z0-9\-._~!$&'()*+,;=:]|%[0-9A-Fa-f]{2})* @)?
      (?:
        \[
        (?:
          (?:
            (?:                                                    (?:[0-9A-Fa-f]{1,4}:){6}
            |                                                   :: (?:[0-9A-Fa-f]{1,4}:){5}
            | (?:                            [0-9A-Fa-f]{1,4})? :: (?:[0-9A-Fa-f]{1,4}:){4}
            | (?: (?:[0-9A-Fa-f]{1,4}:){0,1} [0-9A-Fa-f]{1,4})? :: (?:[0-9A-Fa-f]{1,4}:){3}
            | (?: (?:[0-9A-Fa-f]{1,4}:){0,2} [0-9A-Fa-f]{1,4})? :: (?:[0-9A-Fa-f]{1,4}:){2}
            | (?: (?:[0-9A-Fa-f]{1,4}:){0,3} [0-9A-Fa-f]{1,4})? ::    [0-9A-Fa-f]{1,4}:
            | (?: (?:[0-9A-Fa-f]{1,4}:){0,4} [0-9A-Fa-f]{1,4})? ::
            ) (?:
                [0-9A-Fa-f]{1,4} : [0-9A-Fa-f]{1,4}
              | (?: (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?) \.){3}
                    (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
              )
          |   (?: (?:[0-9A-Fa-f]{1,4}:){0,5} [0-9A-Fa-f]{1,4})? ::    [0-9A-Fa-f]{1,4}
          |   (?: (?:[0-9A-Fa-f]{1,4}:){0,6} [0-9A-Fa-f]{1,4})? ::
          )
        | [Vv][0-9A-Fa-f]+\.[A-Za-z0-9\-._~!$&'()*+,;=:]+
        )
        \]
      | (?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}
           (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
      | (?:[A-Za-z0-9\-._~!$&'()*+,;=]|%[0-9A-Fa-f]{2})*
      )
      (?: : [0-9]* )?
      (?:/ (?:[A-Za-z0-9\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})* )*
    | /
      (?:    (?:[A-Za-z0-9\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+
        (?:/ (?:[A-Za-z0-9\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})* )*
      )?
    |        (?:[A-Za-z0-9\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+
        (?:/ (?:[A-Za-z0-9\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})* )*
    |
    )
    (?:\? (?:[A-Za-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9A-Fa-f]{2})* )?
    `x";
  return preg_match($pattern, $value) === 1;
}

/**
 * Implements hook_field_is_empty().
 */
function edoweb_field_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see field_example_field_widget_form()
 */
function edoweb_field_field_widget_info() {

  return array(
    'edoweb_autocomplete_widget' => array(
      'label' => t('Auto-complete'),
      'field types' => array('edoweb_ld_reference'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    'edoweb_upload_widget' => array(
      'label' => t('File Upload'),
      'field types' => array('edoweb_datastream'),
    ),
  );

}

/**
 * Implements hook_field_formatter_info().
 */
function edoweb_field_field_formatter_info() {
  return array(
    'edoweb_ld_format' => array(
      'label' => t('Linked data URI'),
      'field types' => array('edoweb_ld_reference'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'edoweb_datastream_format' => array(
      'label' => t('Datastream URI'),
      'field types' => array('edoweb_datastream'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function edoweb_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  switch ($display['type']) {
    case 'edoweb_ld_format':
      foreach ($items as $delta => $item) {
        $target_entity = edoweb_basic_load(
          _edoweb_compact_uri($item['value'])
        );
        // FIXME: Why is this null for dewey classifications?
        if (!$target_entity) continue;
        $elements[$delta] = array(
          '#markup' => l(
            entity_label(EDOWEB_ENTITY_TYPE, $target_entity),
            'resource/' . $target_entity->remote_id
          )
        );
      }
      break;
    case 'edoweb_datastream_format':
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#markup' => l($item['value'], $item['value']),
        );
      }
      break;
  }
  return $elements;
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 */
function edoweb_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Add autocomplete JS
  drupal_add_library('system', 'ui.autocomplete');
  drupal_add_js(
    drupal_get_path('module', 'edoweb_field') . '/edoweb_field_autocomplete.js'
  );


  switch ($instance['widget']['type']) {
    case 'edoweb_autocomplete_widget':

      // Get field configuration
      $field_info = field_info_field($field['field_name']);
      $field_name = $field_info['field_name'];
      $field_cardinality = $field_info['cardinality'];

      // Widget Fieldset
      $element += array(
        '#type' => 'fieldset',
      );

      // Textfield to hold new values
      $element['edoweb_autocomplete_widget']['value'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
          'class' => array('edoweb_autocomplete_widget', $field_name, $instance['bundle']),
        ),
        '#parents' => array(
          'edoweb_autocomplete_widget', $field_name, 'value'
        ),
        '#disabled' => TRUE,
        '#access' => FALSE,
      );

      // Submit button to add new values
      $element['edoweb_autocomplete_widget']['submit'] = array(
        '#type' => 'submit',
        '#parents' => array(
          'edoweb_autocomplete_widget', $field_name, 'submit'
        ),
        '#name' => "edoweb_autocomplete_widget_add_$field_name",
        '#value' => t('HinzufÃ¼gen'),
        '#disabled' => TRUE,
        '#access' => FALSE,
        '#submit' => array('edoweb_autocomplete_widget_update_value'),
      );

      // Reload items from form_state values
      if (array_key_exists('values', $form_state)) {
        $items = array();
        if (array_key_exists($field_name, $form_state['values'])) {
          foreach ($form_state['values'][$field_name][LANGUAGE_NONE] as $value) {
            array_push($items, $value);
          }
        }
      }

      // Handle add event
      if (array_key_exists('triggering_element', $form_state)
          && ($form_state['triggering_element']['#name']
          == "edoweb_autocomplete_widget_add_{$field_name}")
      ) {
        $element['#prefix'] = '<a name="focus"></a>';
        $added_value =
          $form_state['values']['edoweb_autocomplete_widget'][$field_name]['value'];
        if ($added_value != '') {
          array_unshift($items, array('value' => $added_value));
        }
      }

      // Handle remove event - because of the way drupal works, the
      // value needs to be empty but still present in the array, i.e.
      // unset($items[$i]) will not work! This is why we need to track
      // the actual count of set values separately in order to properly
      // handle cardinality limits.
      $value_count = 0;
      foreach (array_keys($items) as $i) {
        if (array_key_exists('triggering_element', $form_state)) {
          if ($form_state['triggering_element']['#name']
              == "edoweb_autocomplete_widget_remove_{$field_name}_{$i}"
          ) {
            $form_state['values'][$field_name][LANGUAGE_NONE][$i]['value'] = '';
            $items[$i]['value'] = '';
            $element['#prefix'] = '<a name="focus"></a>';
          }
        }
        if ($items[$i]['value'] != '') {
          $value_count++;
        }
      }

      // Enabled add button if max cardinality is not reached
      if (($field_cardinality == FIELD_CARDINALITY_UNLIMITED)
          || ($value_count < $field_cardinality)
      ) {
        unset($element['edoweb_autocomplete_widget']['submit']['#disabled']);
        unset($element['edoweb_autocomplete_widget']['submit']['#access']);
        unset($element['edoweb_autocomplete_widget']['value']['#disabled']);
        unset($element['edoweb_autocomplete_widget']['value']['#access']);
      }

      // List items
      foreach (array_keys($items) as $i) {
        // Hidden inputs for values
        $element[$i]['value'] = array(
          '#type' => 'hidden',
          '#value' => $items[$i]['value'],
        );
        if (!edoweb_field_field_is_empty($items[$i], $field)) {
          $target_entity = edoweb_basic_load(
            _edoweb_compact_uri($items[$i]['value'])
          );
          // FIXME: Why is this null for dewey classifications?
          if (!$target_entity) continue;
          // Associated data for display
          $element[$i]['data'] = array(
            '#type' => 'item',
            '#title' => entity_label(EDOWEB_ENTITY_TYPE, $target_entity),
          );
          // Submit button to remove value
          $element[$i]['data']['remove'][] = array(
            '#type' => 'submit',
            '#name' => "edoweb_autocomplete_widget_remove_{$field_name}_{$i}",
            '#value' => t('Entfernen'),
            '#submit' => array('edoweb_autocomplete_widget_update_value'),
          );
        }
      }

      break;

    case 'edoweb_upload_widget':
      $widget = $element;
      $widget['#delta'] = $delta;
      $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
      if ($value == '') {
        $widget += array(
          '#type' => 'file',
          '#title' => t('Choose a file'),
        );
      }
      $element['value'] = $widget;
  }

  return $element;
}

function edoweb_autocomplete_widget_update_value($form, &$form_state) {
  unset($form['edoweb_autocomplete_widget']['value']['#value']);
  unset($form_state['input']['edoweb_autocomplete_widget']);
  unset($form_state['edoweb_autocomplete_widget']);
  unset($form_state['complete form']['edoweb_autocomplete_widget']);
  $form_state['rebuild'] = TRUE;
}

/**
 * Add cache table for linked data labels
 */
function edoweb_field_update_7100() {
  $schema = drupal_get_schema('edoweb_ld_reference_label_cache', TRUE);
  db_create_table('edoweb_ld_reference_label_cache', $schema);
}
