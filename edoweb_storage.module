<?php

/**
 * @file
 * Implementation of the field storage API for Edoweb Storage.
 * Any data access is logged and discarded.
 */

/**
 * Implements hook_field_storage_info().
 */
function edoweb_storage_field_storage_info() {
  return array(
    'edoweb_storage' => array(
      'label' => t('Edoweb Storage field storage'),
      'description' => t('Stores nodes and fields in a Edoweb Storage database.'),
    ),
  );
}

/**
 * Implements hook_field_storage_details().
 */
function edoweb_storage_field_storage_details($field) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_create_field().
 */
function edoweb_storage_field_storage_create_field($field) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_update_field().
 */
function edoweb_storage_field_storage_update_field($field, $prior_field, $has_data) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_delete_field().
 */
function edoweb_storage_field_storage_delete_field($field) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_load().
 */
function edoweb_storage_field_storage_load($entity_type, $entities, $age, $fields, $options) {
  $api = new EdowebAPIClientLocal();
  foreach ($entities as $entity) {
    $api->load($entity);
  }
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_write().
 */
function edoweb_storage_field_storage_write($entity_type, $entity, $op, $fields, $entity_write = FALSE) {
  $api = new EdowebAPIClientLocal();
  $api->save($entity);
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}


/**
 * Implement hook_field_storage_delete().
 *
 */
function edoweb_storage_field_storage_delete($entity_type, $entity, $fields) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implement hook_field_storage_delete_revision().
 *
 */
function edoweb_storage_field_storage_delete_revision($entity_type, $entity, $fields) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implement hook_field_storage_delete_instance().
 *
 */
function edoweb_storage_field_storage_delete_instance($instance) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

class DevnullDBStorageException extends Exception {}

/**
 * Implements hook_entity_query_alter().
 *
 * Alter the entity info.
 */
function edoweb_storage_entity_query_alter($query) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

function edoweb_storage_field_storage_query($query) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_query().
 *
 */
function edoweb_storage_query($query) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_attach_rename_bundle().
 */
function edoweb_storage_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_entity_insert().
 */
function edoweb_storage_entity_insert($entity, $entity_type) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_entity_update().
 */
function edoweb_storage_entity_update($entity, $entity_type) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_attach_delete.
 */
function edoweb_storage_field_attach_delete($entity_type, $entity) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_entity_info_alter().
 */
function edoweb_storage_entity_info_alter(&$entity_info) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

function __devnulldb_log($message, $target='php://stderr') {
  file_put_contents($target, $message);
}
